(name 'ArbitraryPrecisionFloat-je.53' message 'ArbitraryPrecisionFloat from SergeStinckwich' id '84bf30a4-2081-401a-87b2-c4b5464438a9' date '9 May 2016' time '3:16:27.110589 pm' author 'je' ancestors ((name 'ArbitraryPrecisionFloat-SergeStinckwich.52' message 'Add the possibility to specify the number of decimal digits instead of using the number of bits' id '45cc0622-592f-4246-9321-8209f7139907' date '28 June 2015' time '9:55:42.093977 pm' author 'SergeStinckwich' ancestors ((name 'ArbitraryPrecisionFloat-nice.51' message 'Correct an awfull bug which did occur when comparing two negative numbers in same binade (that is having same exponent).Note that #digitCompare: (which is based on digitCompare: of Integer) should compare magnitudes. Buggy implementation was a mixture comparing values in some cases...self assert: (ArbitraryPrecisionFloat readFrom: ''-1.0'' readStream numBits: 53) >= (ArbitraryPrecisionFloat readFrom: ''-1.9'' readStream numBits: 53).' id '6b09581a-ed1e-584d-aacf-becf246bbe65' date '9 February 2015' time '2:58:39.321 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.50' message 'Refactor usage of power series expansion:- don''t ask to self to do something to x, just ask to x itself  in other words, avoid (self powerExpansionCos: x precision: p)  and prefer (x powerExpansionCosPrecision: p)- use power series expansion near zero instead of increasing precision for  #( arSinh arTanh sinh tanh )- same near 1 for arCosh- use power series expansion too near zero for  #(arcSin cosh tan)' id '91367ca8-4b90-423d-bc08-d244da56a5c2' date '9 February 2015' time '4:26:48.637 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.49' message 'Use 10 more bits for evaluating the hyperbolic, inverse hyperbolic and inverse trigonometric functions.Otherwise, they fail to pass such test, especially for low precision (n = 11):#(arcSin arcCos arcTan sinh cosh tanh arSinh arTanh) do: [:func |	| n |	n := 11.	ArbitraryPrecisionFloatTest new checkDoublePrecisionSerie: ((1 to: 1<<n-1) collect: [:e | e / (1<<n)]) forFunction: func nBits: n].#(arcTan sinh cosh tanh arSinh arCosh) do: [:func |	| n |	n := 11.	ArbitraryPrecisionFloatTest new checkDoublePrecisionSerie: (1 to: 1<<n-1) forFunction: func nBits: n].' id '5b35295a-9707-4fbb-a338-2330a1a8b0f5' date '8 February 2015' time '11:21:53.589 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.48' message 'Solve obvious problem of neperian logarithm when receiver is less than one: the method used to evaluate the reciprocal without extended precision... TsssSolve another problem when the receiver is very close to one: the algorithm was not accurate enough and was slow compared to trivial ln( (x-1)/(x+1) ) power serie expansion.' id 'edd12067-4de7-4d75-b737-2d3353f023bd' date '8 February 2015' time '11:07:37.374 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.47' message 'Trigonometric functions require more precision when taking the modulo 2pi, especially in low precision. For example, when testing this:| n |n := 11.ArbitraryPrecisionFloatTest new checkDoublePrecisionSerie: (1 to: 1<<n-1) forFunction: #sin nBits: n.' id 'abf1b2b2-113b-4ec3-b2d1-270916fc901e' date '8 February 2015' time '8:48:34.446 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.46' message 'Implement raisedToInteger:' id 'c39f0c16-7d61-4219-924d-874f1a129c51' date '7 February 2015' time '2:23:29.282 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.45' message 'use self one in ulp' id 'e164c774-325e-4f87-ba14-c4225ddb97f1' date '7 February 2015' time '2:22:24.666 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.44' message 'arcTan need more bits so as to correctly evaluate the reciprocal when self > 1.' id '2d7b364a-31ac-4e57-a1c2-c35e7115cab3' date '7 February 2015' time '2:21:47.252 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.43' message 'Fix bug in reciprocal.' id '9375f6d5-a86d-dc41-bea7-6414926098e2' date '18 July 2014' time '1:24:08.21 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.42' message 'Implement isAnExactFloat for compatibility with Squeak trunk 4.6' id 'a014327c-af9b-4d8e-9eb0-ff1b853723be' date '21 May 2014' time '2:55:51.317 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.41' message 'Fix asFloat for an ArbitraryPrecisionFloat slightly smaller than Float fmin, but that should round up to Float fmin.	((Float fmin asArbitraryPrecisionFloatNumBits: Float precision) * 3 / 4) asFloat = Float fmin.Fix some copy/pasted comment for inverse hyperbolic functions.' id '1341c00f-16df-41ba-aec1-2b6033d643ac' date '19 March 2014' time '1:12:38.558 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.40' message 'Minor refactoring: guard clauses' id '600db6a4-43c2-4b74-8d80-108758e111a6' date '16 March 2014' time '11:53:38.317858 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.39' message 'Comment ArbitraryPrecisionFloatForTrigonometryUse isZero and negative where it makes sense.' id 'fdcc4133-8d03-4582-959e-9a7403e601dd' date '16 March 2014' time '11:34:18.780143 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.38' message 'Fix ulp' id 'e071fb0c-c2cc-448a-b537-29ca4874cdca' date '16 February 2014' time '10:04:33.039 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.37' message 'Get rid of intermediate add: subtract: multiplyBy: divideBy:Bye bye useless false polymorphism' id 'df57bda2-34ec-493a-b967-9a63cc2a3ad6' date '30 July 2013' time '1:47:55.016 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.36' message 'Add some messages found in Float protocol:- significand (normalized in the form 1.xxx)- ulp (0 for zero because the exponent is unlimited)- successor (0 for zero) replaces buggish nextTowardPositiveInfinity- predecessor (0 for zero) replaces buggish nextTowardNegativeInfinity' id '6dd5c973-68ac-4938-86e3-3c754b5c05d1' date '30 July 2013' time '1:43:31.43 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.35' message 'Fix printString again (normalize vs reduce drove me nuts)Fix Fraction -> ArbitraryPrecisionFloat (one bit missing in some cases)Add asMinimalDecimalFraction' id 'cdf97fde-a275-4ffd-8d7b-7795c33d1184' date '25 July 2013' time '11:15:07.413 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.34' message 'Correct yet another stupid printString bug: the significand should be normalized before printing' id 'fc254505-826f-4ef0-b4cc-eb3274b1b5ca' date '19 July 2013' time '3:09:41.575 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.33' message 'Correct arbitrary precision float scanning (#readFrom:numBits:)' id '2796deab-127c-407e-8ab8-c424c85d2b75' date '27 June 2013' time '11:12:52.896 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.32' message 'Comment only: better reference directly rather than thru citeseer' id '629d5dfb-3579-2448-a405-2a16fb16dcc7' date '2 January 2013' time '6:49:24.926 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.31' message 'Apply some refactorings of Float to ArbitraryPrecisionFloat (converting asFloat and printing).' id 'ffeb7f4a-7d36-4dad-bd45-7e3f8ec6091c' date '3 March 2012' time '8:50:34.705 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.30' message 'Enable mixed arithmetic with ScaledDecimals.' id 'f7d7dce1-c9cd-5744-89e2-8f24abba1eed' date '27 September 2011' time '8:25:04.94 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.29' message 'Remove LargeNegativeInteger>>isZero which is equal to super in Squeak (since negative inherits from positive).' id '8ce83c02-03d6-4399-a597-bbb57815c1c1' date '27 September 2011' time '12:19:18.898 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.28' message 'Implement ArbitraryPrecisionFloat class>>readFrom:numBits: thanks to a little NumberParser extension.' id '8655b2e3-35ca-46ac-826f-8425d4b76f00' date '30 August 2011' time '10:18:07.954 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.27' message 'Add #asfraction to convert an ArbitrayrPrecisionFloat to its exact value.' id 'd02bbe58-36d2-410f-913d-e9f6274ff9ec' date '30 August 2011' time '3:08:54.223 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.26' message 'Correct some string and tempVar argCosh -> arCosh' id '4bdffdb6-b777-4b8d-9f17-c2b44ea5bb3b' date '6 May 2011' time '2:26:50.594 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.25' message 'After thoughts, use lowercase h in sinh cosh tanh arSinh arCosh arTanhUse DomainError' id '0d35693f-5c3f-42a6-8420-76185e443501' date '23 April 2011' time '12:58:41.388 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.24' message 'Use ISO 31-11 compliant names for inverse hyperbolic functions.Use camel case for hypebolic and inverse hypebolic functions.' id '56af42e1-1fcb-4e26-b3e8-527a9028f336' date '22 April 2011' time '1:16:04.158 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.23' message 'Add more bits for modulo 2*pi computation in order to correct a few ulp errors for cosine of large numbers.' id '5b0166a0-6155-4cf0-bb65-b9e921a09fec' date '27 December 2010' time '7:34:29.376 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.22' message 'Add inverse hyperbolic functions.Correct an infinite loop for sqrt(3).Add inPlaceSqrt with a naive integer sqrtRounded (10x slower than sqrt).' id '7b20f5ef-2f18-a743-973b-e4ea243bb818' date '14 November 2010' time '2:01:38.024 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.21' message 'Increase precision a bit to let some IEEE 754 single precision tests pass (on VW).' id '0dd1043e-cee9-1c4e-b0d4-d8cc7ac40388' date '13 November 2010' time '9:22:08.543 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.20' message 'Add hyperbolic functions.Adjust precision for passing more stringent tests.' id 'edb1f146-824a-f34d-86d5-e8219db6787d' date '13 November 2010' time '4:02:12.174 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.19' message 'Implement arcTan:' id '51b70a89-cc78-744a-9116-b2cb4fb048b6' date '12 November 2010' time '10:28:05.298 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.18' message 'Implement inverse trigonometric functions' id 'c3a9a3ee-eb76-214b-96a4-77ccd0dd395e' date '12 November 2010' time '3:38:33.909 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.17' message 'Correct sin/cos : two more bits needed for modulo(otherwise, 90 degreesToRadians cos ulp is unstable)' id 'b2027939-1f33-ce49-a5c6-bf2ca31a7c2e' date '10 November 2010' time '10:32:05.305 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.16' message 'Correct bug for cos(0)' id 'e829e834-f0c0-ca48-a33e-47959733ec32' date '10 November 2010' time '9:20:28.948 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.15' message 'Provides faster cos by recursive cos(2x) evaluationsProvides faster sincos and tan by recursive sin(2x) and cos(2x) evaluationsPrepare futur arcTan by power series expansion (for small x only)' id 'bd310e3a-84b0-4df4-b528-86d20933ec8a' date '7 November 2010' time '11:14:51.813 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.14' message 'Correct bug in sincos.Avoid using #new when not necessary' id 'e175d35a-2a97-455b-bb36-ba4530e23356' date '6 November 2010' time '6:23:01.86 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.13' message 'Correct a bug: the sign of a Float was forgotten when converted to an ArbitraryPrecisionFloat.' id '0930157e-c4e2-4e7d-8bda-d48e3370b9b0' date '5 November 2010' time '9:43:20.405 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.12' message 'Add tan' id 'fad04e9b-2032-49c9-ac3e-425d16f9c84b' date '1 November 2010' time '9:23:09.693 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.11' message 'First implementation of sin and cos' id 'e3bed034-cdbf-4eae-99d4-5d31998065a2' date '1 November 2010' time '8:59:51.455 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.10' message 'Separate tests in another package' id 'aacff9a1-3948-4b4d-b989-17389536489b' date '1 October 2010' time '1:40:11.111 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.9' message 'Added some coercion testsCorrected a rounding error wih(((1 bitShift: 52) asArbitraryPrecisionFloatNumBits: 53)+(-1/3)) asFloat hexversus:((1.0 timesTwoPower: 52) +(-1/3)) asFloat hex' id '73a00914-8e62-47c1-b26f-ac9801df423f' date '5 April 2008' time '2:23:59 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.8' message 'renamed substract* in correct english subtract*' id 'db4a2a86-c274-4ace-a2a4-9435936206d6' date '4 April 2008' time '10:31:03 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.7' message 'improved expadded tests vs IEEE 754 double precision exp & ln' id 'def62b08-87d4-724c-b116-50822c6701e0' date '10 February 2007' time '11:08:02 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.6' message 'changed ln and sqrt erroroptimize using highBitOfMagnitude instead of abs highBit' id '2a48bdcc-362a-b046-84d8-4d78c69306f2' date '10 February 2007' time '10:32:15 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.5' message 'added- pi zero one constants- first implementation of ln and exp- printString in decimal representation' id '364ef03c-5820-2f4c-a6ed-d6361739b4bb' date '10 February 2007' time '1:45:44 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.4' message '1) renamed inst var exponent -> biasedExponent2) changed semantics of exponent message to match those of Float>>exponent3) added a few comments4) attempted a first sqrt implementation' id 'bc6d1dee-f642-3846-8579-b994dbdf8308' date '8 February 2007' time '12:11:52 am' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.3' message 'Release on SM' id '59c3af4b-6444-463c-adfe-87eb0c7efe94' date '3 May 2006' time '11:54:08 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.2' message 'Put on squeak source' id 'b019bfe5-4e88-4455-9968-e28d192aa1e5' date '3 May 2006' time '11:42:58 pm' author 'nice' ancestors ((name 'ArbitraryPrecisionFloat-nice.1' message 'Creation as Monticello Package' id '5fc9d2b1-61b9-4705-9f31-a81d32442ee7' date '3 May 2006' time '11:15:30 pm' author 'nice' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())